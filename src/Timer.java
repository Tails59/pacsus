import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.text.View;
import javax.swing.border.Border;

/* Generated by Together */

/**
 * This represents a hypothetical clock set to produce a "new day" signal every midnight.
 *
 * In this emulation the signal can be triggered by a simple button all by itself in a JFrame.
 * The uses made of this timing signal are described in the Timer use case
 * diagram (hyperlinked from this class).
 *
 * There will only be a single instance of this class. It will maintain a current Date object,
 * incremented with each new day. The interface will always show the current date.
 *
 * @stereotype boundary
 */
@SuppressWarnings({"serial", "unused"})
public class Timer extends JFrame implements ActionListener {
    /**
     * The Timer has a navigable association to the system status so that it can send the new
     * date each time that a new day starts.
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label It's a new day
     * @directed*/
    private System_status lnkSystem_status;

    /**
     * The Timer has a navigable association to the permit list so that it can send the new
     * date each time that a new day starts.
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label It's a new day
     * @directed
     */
    private Permit_list lnkPermit_list;
     
    /**JPanel*/
    JPanel contentPane;
    
    /**Update Button*/
    JButton update;
    
    /**Jlabel placeholder*/
    JLabel placeholder;
    /**
     * This attribute holds today's date.
     *
     * It is incremented every time a midnight "tick" occurs (by a click on the button in
     * the visible interface).
     *
     * The date is sent to the System_status every time that a tick occurs, so that it can
     * keep an up-to-date note of the date (for example for attaching to each entry in the log).
     *
     * The date is also sent to the Permit_list every time that a tick occurs so that tidying
     * up actions on the permits can be carried out - for example automatically cancelling expired permits.
     * @supplierCardinality 1
     * @clientCardinality 1
     * @link aggregation
     * @label Contains
     * @directed
     */
    private Date today;
    private final Color BUTTON_BGKD = new Color(112,128,144);

    public Timer(System_status status, Permit_list permits) {
    	
    	this.lnkSystem_status = status;
    	this.lnkPermit_list = permits;
    	
    	today = new Date();           
        today.setDayNumber(1);	
        status.setToday(today);

    	setTitle("Timer");
    	setSize(350,150);
    	setDefaultCloseOperation(EXIT_ON_CLOSE);
    	//window.setLayout(new FlowLayout());
    	
    	setBounds(1300, 550, 400, 200);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		
		JPanel panel = new JPanel();
		contentPane.add(panel, BorderLayout.CENTER);
		panel.setLayout(new GridLayout(0, 2, 0, 0));
    	
    	placeholder=new JLabel("Date");
        placeholder.setText("Date: " + today.getDayNumber());
        placeholder.setHorizontalAlignment(SwingConstants.CENTER);
        panel.add(placeholder);
        
    	update = new JButton("Update");
    	update.setBackground(BUTTON_BGKD);
    	update.setForeground(Color.WHITE);
    	update.setFocusPainted(false);
        panel.add(update);
        update.addActionListener(this);
    	
        
        // Display the frame
        setVisible(true);
    }
    
    public void incrementDate() {
    	today.increment();		
		placeholder.setText("Date: " + today.getDayNumber());
		informSystem();
    }
    
    public void informSystem() {
    	// code to inform system_status class about the new date
    	lnkSystem_status.setToday(today);
    	lnkPermit_list.resetPermits(today);
    }

	@Override
	public void actionPerformed(ActionEvent e) {
		//
		if (e.getSource() == update) {
			incrementDate();
		}
	}
}
