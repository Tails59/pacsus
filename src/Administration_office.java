
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.border.EmptyBorder;

import javax.swing.BoxLayout;
import java.awt.GridLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.FlowLayout;
import java.awt.Font;

import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.JTextPane;

/* Generated by Together */

/**
 * This class represents the interactive interface to PACSUS administration
 * functions carried out in the Estates and Campus Services Office. Information
 * about these functions is in the Administration use case diagram (hyperlinked
 * from this class).
 *
 * The interface comprises one screen with all the functions present on it: they
 * could all be on view at once, or perhaps in alternative JPanels (in a JFrame
 * with JTabbedPane); the current date (day number) is always displayed.
 *
 * There could be any number of instances of this class, potentially one for
 * each workstation in the office, with different staff carrying different
 * functions.
 *
 * The class implements Observer, and observes the system status so that it can
 * keep the displayed current date correct.
 * 
 * @stereotype boundary
 */
@SuppressWarnings({ "deprecation", "serial", "unused" })
public class Administration_office extends JFrame implements Observer, ActionListener {
	/**
	 * Each instance of Administration_office has a navigable association to the
	 * permit list so that it can enquire about/add/delete/modify permits.
	 * 
	 * @supplierCardinality 1
	 * @clientCardinality 1..*
	 * @label Administration functions
	 * @directed
	 */

	private Permit_list lnkPermit_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * vehicle list so that it can enquire about/add/delete/modify vehicle details.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Administration functions
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * system status so that it can find out status information about the system.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label See date
	 * @directed
	 */
	private System_status lnkSystem_status;

	private JTabbedPane tabbedPane;

	private JPanel contentPane;
	private JButton submitBtn;
	private JComboBox<String> cb_PermitTypeAdd;
	private JTextField tf_NameAdd;
	private JTextField tf_regNumberAdd;
	private JTextField tf_CarMakeAdd;
	private JTextField tf_CarModelAdd;
	private JTextField tf_CarColorAdd;
	private JTextField tf_VisitDateAdd;
	private JTextField tf_HostNameAdd;
	private JTextField tf_NameAddWarning;
	private JTextPane tp_RecordWarning;
	private JButton btnSubmitWarning;
	private JTextField tf_CancelWarningNumber;
	private JComboBox<Integer> cancelWarningBox;
	private JTextPane textPaneWarningCanc;
	private JTextField tf_NameCanc;
	private JTextPane textPanePermitCanc;
	private JButton btnSubmitWarningCanc;
	protected JTextField tf_Status;
	protected JTextPane tp_Enquiry;
	protected JButton btnSubmitEnquiry;

	protected JTextField tf_PermitNumberMod;
	private JTextField tf_NameMode;
	protected JTextField tf_RegNumberMod;
	private JTextField tf_CarMakeMod;
	private JTextField tf_CarModelMod;
	private JTextField tf_CarColorMod;
	private JTextField tf_VisitDateMod;

	private JTextField tf_HostNameMod;
	private JComboBox<String> comboBoxMod;
	protected JButton btnGetInfo;
	protected JButton submitBtnMod;

	private Date today;
	private int date;

	private JButton btnSubmitPermitCanc;
	private Vehicle_info[] vehicles;

	private JTextField tf_numberOfWarnings;
	private JButton addVehicleBtn;
	private JLabel lblCarNumber;
	private JButton addVehicleClrBtn;
	private JLabel lblVehiclesMod;
	private JComboBox<String> vehiclesBoxMod;
	private JButton btnAddVehicleMod;
	private JButton btnRemoveVehicleMod;
	private JLabel lblCarNumberMod;

	public Administration_office(System_status status, Vehicle_list veh, Permit_list permits) {
		this.lnkSystem_status = status;
		this.lnkVehicle_list = veh;
		this.lnkPermit_list = permits;

		final Color BUTTON_BGKD = new Color(112, 128, 144);
		final Color BUTTON_FGND = new Color(255, 255, 255);

		today = status.getToday();
		date = today.getDayNumber();

		vehicles = new Vehicle_info[5]; // setting a vehicle limit at 5 per permit

		setTitle("Administration Office \t [Date: " + date + "]");

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		setBounds(900, 35, 750, 500);
		contentPane = new JPanel();
		setResizable(false);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);

		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBackground(BUTTON_BGKD);
		tabbedPane.setForeground(BUTTON_FGND);
		contentPane.add(tabbedPane, BorderLayout.CENTER);

		// Add: Header
		final int HEADER_HEIGHT = 750;
		final int HEADER_WIDTH = 35;
		final Color HEADER_BACKGROUND = new Color(0, 105, 56);
		final Font HEADER_FONT = new Font("Calibri", Font.BOLD, 25);
		JPanel header = new JPanel();
		header.setBackground(HEADER_BACKGROUND);
		header.setLayout(new FlowLayout(FlowLayout.LEFT));
		header.setPreferredSize(new Dimension(HEADER_HEIGHT, HEADER_WIDTH));
		JLabel lblAdminOffice = new JLabel("PACSUS - Administration Office");
		lblAdminOffice.setFont(HEADER_FONT);
		lblAdminOffice.setForeground(Color.WHITE);
		header.add(lblAdminOffice);
		contentPane.add(header, BorderLayout.PAGE_START);

		// Add Permit Page
		JPanel addPermit = new JPanel();
		tabbedPane.addTab("Add Permit", null, addPermit, null);
		GridBagLayout gbl_addPermit = new GridBagLayout();
		gbl_addPermit.columnWidths = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
		gbl_addPermit.rowHeights = new int[] { 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 };
		gbl_addPermit.columnWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, Double.MIN_VALUE };
		gbl_addPermit.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
		addPermit.setLayout(gbl_addPermit);

		JLabel lblName = new JLabel("Name: ");
		GridBagConstraints gbc_lblName = new GridBagConstraints();
		gbc_lblName.anchor = GridBagConstraints.WEST;
		gbc_lblName.insets = new Insets(0, 0, 5, 5);
		gbc_lblName.gridx = 1;
		gbc_lblName.gridy = 0;
		addPermit.add(lblName, gbc_lblName);

		tf_NameAdd = new JTextField();
		GridBagConstraints gbc_tfNameAdd = new GridBagConstraints();
		gbc_tfNameAdd.insets = new Insets(0, 0, 5, 0);
		gbc_tfNameAdd.fill = GridBagConstraints.HORIZONTAL;
		gbc_tfNameAdd.gridx = 6;
		gbc_tfNameAdd.gridy = 0;
		addPermit.add(tf_NameAdd, gbc_tfNameAdd);
		tf_NameAdd.setColumns(10);

		JLabel lblRegistrationNumber = new JLabel("Registration Number:");
		GridBagConstraints gbc_lblRegistrationNumber = new GridBagConstraints();
		gbc_lblRegistrationNumber.anchor = GridBagConstraints.WEST;
		gbc_lblRegistrationNumber.insets = new Insets(0, 0, 5, 5);
		gbc_lblRegistrationNumber.gridx = 1;
		gbc_lblRegistrationNumber.gridy = 1;
		addPermit.add(lblRegistrationNumber, gbc_lblRegistrationNumber);

		tf_regNumberAdd = new JTextField();
		GridBagConstraints gbc_regNumberAdd = new GridBagConstraints();
		gbc_regNumberAdd.insets = new Insets(0, 0, 5, 0);
		gbc_regNumberAdd.fill = GridBagConstraints.HORIZONTAL;
		gbc_regNumberAdd.gridx = 6;
		gbc_regNumberAdd.gridy = 1;
		addPermit.add(tf_regNumberAdd, gbc_regNumberAdd);
		tf_regNumberAdd.setColumns(10);

		JLabel lblCarMakeAdd = new JLabel("Car make:");
		GridBagConstraints gbc_lblCarMakeAdd = new GridBagConstraints();
		gbc_lblCarMakeAdd.insets = new Insets(0, 0, 5, 5);
		gbc_lblCarMakeAdd.anchor = GridBagConstraints.WEST;
		gbc_lblCarMakeAdd.gridx = 1;
		gbc_lblCarMakeAdd.gridy = 2;
		addPermit.add(lblCarMakeAdd, gbc_lblCarMakeAdd);

		tf_CarMakeAdd = new JTextField();
		GridBagConstraints gbc_CarMakeAdd = new GridBagConstraints();
		gbc_CarMakeAdd.insets = new Insets(0, 0, 5, 0);
		gbc_CarMakeAdd.fill = GridBagConstraints.HORIZONTAL;
		gbc_CarMakeAdd.gridx = 6;
		gbc_CarMakeAdd.gridy = 2;
		addPermit.add(tf_CarMakeAdd, gbc_CarMakeAdd);
		tf_CarMakeAdd.setColumns(10);

		JLabel lblCarModelAdd = new JLabel("Car model:");
		GridBagConstraints gbc_lblCarModelAdd = new GridBagConstraints();
		gbc_lblCarModelAdd.insets = new Insets(0, 0, 5, 5);
		gbc_lblCarModelAdd.anchor = GridBagConstraints.WEST;
		gbc_lblCarModelAdd.gridx = 1;
		gbc_lblCarModelAdd.gridy = 3;
		addPermit.add(lblCarModelAdd, gbc_lblCarModelAdd);

		tf_CarModelAdd = new JTextField();
		GridBagConstraints gbc_CarModelAdd = new GridBagConstraints();
		gbc_CarModelAdd.insets = new Insets(0, 0, 5, 0);
		gbc_CarModelAdd.fill = GridBagConstraints.HORIZONTAL;
		gbc_CarModelAdd.gridx = 6;
		gbc_CarModelAdd.gridy = 3;
		addPermit.add(tf_CarModelAdd, gbc_CarModelAdd);
		tf_CarModelAdd.setColumns(10);

		JLabel lblCarColorAdd = new JLabel("Car color:");
		GridBagConstraints gbc_lblCarColorAdd = new GridBagConstraints();
		gbc_lblCarColorAdd.insets = new Insets(0, 0, 5, 5);
		gbc_lblCarColorAdd.anchor = GridBagConstraints.WEST;
		gbc_lblCarColorAdd.gridx = 1;
		gbc_lblCarColorAdd.gridy = 4;
		addPermit.add(lblCarColorAdd, gbc_lblCarColorAdd);

		tf_CarColorAdd = new JTextField();
		GridBagConstraints gbc_CarColorAdd = new GridBagConstraints();
		gbc_CarColorAdd.insets = new Insets(0, 0, 5, 0);
		gbc_CarColorAdd.fill = GridBagConstraints.HORIZONTAL;
		gbc_CarColorAdd.gridx = 6;
		gbc_CarColorAdd.gridy = 4;

		addPermit.add(tf_CarColorAdd, gbc_CarColorAdd);
		tf_CarColorAdd.setColumns(10);

		addVehicleBtn = new JButton("Add New Vehicle");
		addVehicleBtn.addActionListener(this);
		addVehicleBtn.setForeground(Color.WHITE);
		addVehicleBtn.setFocusPainted(false);
		addVehicleBtn.setBackground(new Color(112, 128, 144));
		GridBagConstraints gbc_addVehBtn = new GridBagConstraints();
		gbc_addVehBtn.insets = new Insets(0, 0, 5, 5);
		gbc_addVehBtn.gridx = 1;
		gbc_addVehBtn.gridy = 5;
		addPermit.add(addVehicleBtn, gbc_addVehBtn);

		addVehicleClrBtn = new JButton("Clear Added Vehicles");
		addVehicleClrBtn.addActionListener(this);
		addVehicleClrBtn.setForeground(Color.WHITE);
		addVehicleClrBtn.setFocusPainted(false);
		addVehicleClrBtn.setBackground(new Color(112, 128, 144));
		GridBagConstraints gbc_addVehicleClrBtn = new GridBagConstraints();
		gbc_addVehicleClrBtn.anchor = GridBagConstraints.WEST;
		gbc_addVehicleClrBtn.insets = new Insets(0, 0, 5, 0);
		gbc_addVehicleClrBtn.gridx = 6;
		gbc_addVehicleClrBtn.gridy = 5;
		addPermit.add(addVehicleClrBtn, gbc_addVehicleClrBtn);

		JLabel lblEnterPermitTypeAdd = new JLabel("Enter Permit Type:");
		GridBagConstraints gbc_lblEnterPermitTypeAdd = new GridBagConstraints();
		gbc_lblEnterPermitTypeAdd.insets = new Insets(0, 0, 5, 5);
		gbc_lblEnterPermitTypeAdd.anchor = GridBagConstraints.WEST;
		gbc_lblEnterPermitTypeAdd.gridx = 1;
		gbc_lblEnterPermitTypeAdd.gridy = 6;
		addPermit.add(lblEnterPermitTypeAdd, gbc_lblEnterPermitTypeAdd);

		cb_PermitTypeAdd = new JComboBox<String>();
		cb_PermitTypeAdd.addItem("Day Visitor");
		cb_PermitTypeAdd.addItem("Regular Visitor");
		cb_PermitTypeAdd.addItem("Permanent Visitor");
		cb_PermitTypeAdd.addItem("University Member");
		cb_PermitTypeAdd.addActionListener(this);
		GridBagConstraints gbc_cbPermitTypeAdd = new GridBagConstraints();
		gbc_cbPermitTypeAdd.insets = new Insets(0, 0, 5, 0);
		gbc_cbPermitTypeAdd.fill = GridBagConstraints.HORIZONTAL;
		gbc_cbPermitTypeAdd.gridx = 6;
		gbc_cbPermitTypeAdd.gridy = 6;
		addPermit.add(cb_PermitTypeAdd, gbc_cbPermitTypeAdd);

		tf_VisitDateAdd = new JTextField();
		GridBagConstraints gbc_VisitDateAdd = new GridBagConstraints();
		gbc_VisitDateAdd.insets = new Insets(0, 0, 5, 0);
		gbc_VisitDateAdd.fill = GridBagConstraints.BOTH;
		gbc_VisitDateAdd.gridx = 6;
		gbc_VisitDateAdd.gridy = 7;
		addPermit.add(tf_VisitDateAdd, gbc_VisitDateAdd);
		tf_VisitDateAdd.setColumns(10);

		JLabel lblVisitDateAdd = new JLabel("Visit Date:");
		GridBagConstraints gbc_lblVisitDateAdd = new GridBagConstraints();
		gbc_lblVisitDateAdd.insets = new Insets(0, 0, 5, 5);
		gbc_lblVisitDateAdd.anchor = GridBagConstraints.WEST;
		gbc_lblVisitDateAdd.gridx = 1;
		gbc_lblVisitDateAdd.gridy = 7;
		addPermit.add(lblVisitDateAdd, gbc_lblVisitDateAdd);

		JLabel lblHostNameAdd = new JLabel("Host Name:");
		GridBagConstraints gbc_lblHostNameAdd = new GridBagConstraints();
		gbc_lblHostNameAdd.insets = new Insets(0, 0, 5, 5);
		gbc_lblHostNameAdd.anchor = GridBagConstraints.WEST;
		gbc_lblHostNameAdd.gridx = 1;
		gbc_lblHostNameAdd.gridy = 8;
		addPermit.add(lblHostNameAdd, gbc_lblHostNameAdd);

		tf_HostNameAdd = new JTextField();
		GridBagConstraints gbc_HostNameAdd = new GridBagConstraints();
		gbc_HostNameAdd.insets = new Insets(0, 0, 5, 0);
		gbc_HostNameAdd.fill = GridBagConstraints.HORIZONTAL;
		gbc_HostNameAdd.gridx = 6;
		gbc_HostNameAdd.gridy = 8;
		addPermit.add(tf_HostNameAdd, gbc_HostNameAdd);
		tf_HostNameAdd.setColumns(10);

		submitBtn = new JButton("Submit");
		submitBtn.setBackground(BUTTON_BGKD);
		submitBtn.setForeground(BUTTON_FGND);
		submitBtn.setFocusPainted(false);
		submitBtn.addActionListener(this);
		GridBagConstraints gbc_submitBtn = new GridBagConstraints();
		gbc_submitBtn.fill = GridBagConstraints.BOTH;
		gbc_submitBtn.insets = new Insets(0, 0, 0, 5);
		gbc_submitBtn.gridx = 1;
		gbc_submitBtn.gridy = 9;
		addPermit.add(submitBtn, gbc_submitBtn);

		lblCarNumber = new JLabel("Vehicles permitted: 0");
		GridBagConstraints gbc_lblCarNumber = new GridBagConstraints();
		gbc_lblCarNumber.gridx = 6;
		gbc_lblCarNumber.gridy = 9;
		addPermit.add(lblCarNumber, gbc_lblCarNumber);

		// Record Warning Page

		JPanel recordWarning = new JPanel();
		tabbedPane.addTab("Record Warning", null, recordWarning, null);
		recordWarning.setLayout(null);

		JLabel lblRegistrationNumberRecord = new JLabel("Name:");
		lblRegistrationNumberRecord.setBounds(29, 38, 140, 13);
		recordWarning.add(lblRegistrationNumberRecord);

		tf_NameAddWarning = new JTextField();
		tf_NameAddWarning.setBounds(179, 35, 516, 19);
		tf_NameAddWarning.setColumns(10);
		recordWarning.add(tf_NameAddWarning);

		btnSubmitWarning = new JButton("Submit");
		btnSubmitWarning.setBounds(331, 90, 81, 21);
		btnSubmitWarning.setBackground(BUTTON_BGKD);
		btnSubmitWarning.setForeground(BUTTON_FGND);
		btnSubmitWarning.setFocusPainted(false);
		btnSubmitWarning.addActionListener(this);
		recordWarning.add(btnSubmitWarning);

		tp_RecordWarning = new JTextPane();
		tp_RecordWarning.setEditable(false);
		tp_RecordWarning.setBounds(29, 138, 666, 287);
		recordWarning.add(tp_RecordWarning);

		// Delete Warning Page

		JPanel deleteWarning = new JPanel();
		tabbedPane.addTab("Delete Warning", null, deleteWarning, null);

		JLabel lblWarningNumberCancel = new JLabel("Name: ");
		lblWarningNumberCancel.setBounds(29, 38, 106, 13);
		deleteWarning.add(lblWarningNumberCancel);

		tf_CancelWarningNumber = new JTextField();
		tf_CancelWarningNumber.setBounds(100, 35, 350, 19);
		tf_CancelWarningNumber.setColumns(10);
		deleteWarning.add(tf_CancelWarningNumber);

		JLabel lblWarningNumber = new JLabel("N\u00B0 Warnings: ");
		lblWarningNumber.setBounds(500, 38, 106, 13);
		deleteWarning.add(lblWarningNumber);

		cancelWarningBox = new JComboBox<Integer>();
		cancelWarningBox.setSize(40, 19);
		cancelWarningBox.setLocation(585, 35);
		cancelWarningBox.addItem(1);
		cancelWarningBox.addItem(2);
		cancelWarningBox.addItem(3);
		cancelWarningBox.addActionListener(this);
		GridBagConstraints gbc_comboBoxCW = new GridBagConstraints();
		gbc_comboBoxCW.insets = new Insets(0, 0, 0, 0);
		gbc_comboBoxCW.fill = GridBagConstraints.HORIZONTAL;
		gbc_comboBoxCW.gridx = 6;
		gbc_comboBoxCW.gridy = 6;
		deleteWarning.add(cancelWarningBox, gbc_comboBoxCW);

		btnSubmitWarningCanc = new JButton("Submit");
		btnSubmitWarningCanc.setBounds(331, 90, 81, 21);
		btnSubmitWarningCanc.setBackground(BUTTON_BGKD);
		btnSubmitWarningCanc.setForeground(BUTTON_FGND);
		btnSubmitWarningCanc.setFocusPainted(false);
		btnSubmitWarningCanc.addActionListener(this);
		deleteWarning.setLayout(null);
		deleteWarning.add(btnSubmitWarningCanc);

		textPaneWarningCanc = new JTextPane();
		textPaneWarningCanc.setEditable(false);
		textPaneWarningCanc.setBounds(29, 138, 666, 250);
		deleteWarning.add(textPaneWarningCanc);

		// Cancel Permit Page

		JPanel cancelPermit = new JPanel();
		tabbedPane.addTab("Cancel Permit", null, cancelPermit, null);
		cancelPermit.setLayout(null);

		JLabel lblPermitCanc = new JLabel("Name: ");
		lblPermitCanc.setBounds(29, 38, 140, 13);
		cancelPermit.add(lblPermitCanc);

		tf_NameCanc = new JTextField();
		tf_NameCanc.setBounds(179, 35, 516, 19);
		cancelPermit.add(tf_NameCanc);
		tf_NameCanc.setColumns(10);

		btnSubmitPermitCanc = new JButton("Submit");
		btnSubmitPermitCanc.setBackground(BUTTON_BGKD);
		btnSubmitPermitCanc.setForeground(BUTTON_FGND);
		btnSubmitPermitCanc.setFocusPainted(false);
		btnSubmitPermitCanc.setBounds(331, 90, 81, 21);
		btnSubmitPermitCanc.addActionListener(this);
		cancelPermit.add(btnSubmitPermitCanc);

		textPanePermitCanc = new JTextPane();
		textPanePermitCanc.setEditable(false);
		textPanePermitCanc.setBounds(29, 138, 666, 287);
		cancelPermit.add(textPanePermitCanc);

		// Status Enquiry Page

		JPanel statusEnquiry = new JPanel();
		tabbedPane.addTab("Status Enquiry", null, statusEnquiry, null);
		statusEnquiry.setLayout(null);

		JLabel lblStatusEnquiry = new JLabel("Name: ");
		lblStatusEnquiry.setBounds(29, 38, 140, 13);
		statusEnquiry.add(lblStatusEnquiry);

		tf_Status = new JTextField();
		tf_Status.setBounds(179, 35, 516, 19);
		statusEnquiry.add(tf_Status);
		tf_Status.setColumns(10);

		btnSubmitEnquiry = new JButton("Submit");
		btnSubmitEnquiry.setBackground(BUTTON_BGKD);
		btnSubmitEnquiry.setForeground(BUTTON_FGND);
		btnSubmitEnquiry.setFocusPainted(false);
		btnSubmitEnquiry.addActionListener(this);
		btnSubmitEnquiry.setBounds(331, 90, 81, 21);
		btnSubmitEnquiry.addActionListener(this);
		statusEnquiry.add(btnSubmitEnquiry);

		tp_Enquiry = new JTextPane();
		tp_Enquiry.setEditable(false);
		tp_Enquiry.setBounds(29, 138, 666, 287);
		statusEnquiry.add(tp_Enquiry);

		// Modify Permit Page

		JPanel modifyPermit = new JPanel();
		tabbedPane.addTab("Modify Permit", null, modifyPermit, null);
		GridBagLayout gbl_modifyPermit = new GridBagLayout();
		gbl_modifyPermit.columnWidths = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
		gbl_modifyPermit.rowHeights = new int[] { 30, 0, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31 };
		gbl_modifyPermit.columnWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, Double.MIN_VALUE };
		gbl_modifyPermit.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
		modifyPermit.setLayout(gbl_modifyPermit);

		JLabel lblPermitMod = new JLabel("Permit Holder:");
		GridBagConstraints gbc_lblPermitMod = new GridBagConstraints();
		gbc_lblPermitMod.anchor = GridBagConstraints.WEST;
		gbc_lblPermitMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblPermitMod.gridx = 1;
		gbc_lblPermitMod.gridy = 0;

		modifyPermit.add(lblPermitMod, gbc_lblPermitMod);

		tf_PermitNumberMod = new JTextField();
		GridBagConstraints gbc_PermitNumberMod = new GridBagConstraints();
		gbc_PermitNumberMod.insets = new Insets(0, 0, 5, 0);
		gbc_PermitNumberMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_PermitNumberMod.gridx = 6;
		gbc_PermitNumberMod.gridy = 0;
		modifyPermit.add(tf_PermitNumberMod, gbc_PermitNumberMod);
		tf_PermitNumberMod.setColumns(10);

		JLabel lblNameMod = new JLabel("Name:");
		GridBagConstraints gbc_lblNameMod = new GridBagConstraints();
		gbc_lblNameMod.anchor = GridBagConstraints.WEST;
		gbc_lblNameMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblNameMod.gridx = 1;
		gbc_lblNameMod.gridy = 1;
		modifyPermit.add(lblNameMod, gbc_lblNameMod);

		tf_NameMode = new JTextField();
		GridBagConstraints gbc_NameMode = new GridBagConstraints();
		gbc_NameMode.insets = new Insets(0, 0, 5, 0);
		gbc_NameMode.fill = GridBagConstraints.HORIZONTAL;
		gbc_NameMode.gridx = 6;
		gbc_NameMode.gridy = 1;
		modifyPermit.add(tf_NameMode, gbc_NameMode);
		tf_NameMode.setColumns(10);

		comboBoxMod = new JComboBox<String>();
		comboBoxMod.addItem("Day Visitor");
		comboBoxMod.addItem("Regular Visitor");
		comboBoxMod.addItem("Permanent Visitor");
		comboBoxMod.addItem("University Member");
		comboBoxMod.addActionListener(this);

		lblVehiclesMod = new JLabel("Vehicles:");
		GridBagConstraints gbc_lblVehiclesMod = new GridBagConstraints();
		gbc_lblVehiclesMod.anchor = GridBagConstraints.WEST;
		gbc_lblVehiclesMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblVehiclesMod.gridx = 1;
		gbc_lblVehiclesMod.gridy = 2;
		modifyPermit.add(lblVehiclesMod, gbc_lblVehiclesMod);

		btnAddVehicleMod = new JButton("+");
		btnAddVehicleMod.addActionListener(this);
		btnAddVehicleMod.setForeground(Color.WHITE);
		btnAddVehicleMod.setFocusPainted(false);
		btnAddVehicleMod.setBackground(new Color(112, 128, 144));
		GridBagConstraints gbc_btnAddVehicleMod = new GridBagConstraints();
		gbc_btnAddVehicleMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnAddVehicleMod.insets = new Insets(0, 0, 5, 5);
		gbc_btnAddVehicleMod.gridx = 3;
		gbc_btnAddVehicleMod.gridy = 2;
		modifyPermit.add(btnAddVehicleMod, gbc_btnAddVehicleMod);

		btnRemoveVehicleMod = new JButton("-");
		btnRemoveVehicleMod.addActionListener(this);
		btnRemoveVehicleMod.setForeground(Color.WHITE);
		btnRemoveVehicleMod.setFocusPainted(false);
		btnRemoveVehicleMod.setBackground(new Color(112, 128, 144));
		GridBagConstraints gbc_btnRemoveVehicleMod = new GridBagConstraints();
		gbc_btnRemoveVehicleMod.insets = new Insets(0, 0, 5, 5);
		gbc_btnRemoveVehicleMod.gridx = 4;
		gbc_btnRemoveVehicleMod.gridy = 2;
		modifyPermit.add(btnRemoveVehicleMod, gbc_btnRemoveVehicleMod);

		vehiclesBoxMod = new JComboBox<String>();
		vehiclesBoxMod.addItem("< No vehicles to show >");
		vehiclesBoxMod.addActionListener(this);
		GridBagConstraints gbc_vehiclesBoxMod = new GridBagConstraints();
		gbc_vehiclesBoxMod.insets = new Insets(0, 0, 5, 0);
		gbc_vehiclesBoxMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_vehiclesBoxMod.gridx = 6;
		gbc_vehiclesBoxMod.gridy = 2;
		modifyPermit.add(vehiclesBoxMod, gbc_vehiclesBoxMod);

		JLabel lblRegistrationNumberMod = new JLabel("Registration Number:");
		GridBagConstraints gbc_lblRegistrationNumberMod = new GridBagConstraints();
		gbc_lblRegistrationNumberMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblRegistrationNumberMod.gridx = 1;
		gbc_lblRegistrationNumberMod.gridy = 3;
		modifyPermit.add(lblRegistrationNumberMod, gbc_lblRegistrationNumberMod);

		tf_RegNumberMod = new JTextField();
		GridBagConstraints gbc_RegNumberMod = new GridBagConstraints();
		gbc_RegNumberMod.insets = new Insets(0, 0, 5, 0);
		gbc_RegNumberMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_RegNumberMod.gridx = 6;
		gbc_RegNumberMod.gridy = 3;

		modifyPermit.add(tf_RegNumberMod, gbc_RegNumberMod);
		tf_RegNumberMod.setColumns(10);

		JLabel lblCarMakeMod = new JLabel("Car make:");
		GridBagConstraints gbc_lblCarMakeMod = new GridBagConstraints();
		gbc_lblCarMakeMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblCarMakeMod.anchor = GridBagConstraints.WEST;
		gbc_lblCarMakeMod.gridx = 1;
		gbc_lblCarMakeMod.gridy = 4;
		modifyPermit.add(lblCarMakeMod, gbc_lblCarMakeMod);

		tf_CarMakeMod = new JTextField();
		GridBagConstraints gbc_CarMakeMod = new GridBagConstraints();

		gbc_CarMakeMod.insets = new Insets(0, 0, 5, 0);
		gbc_CarMakeMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_CarMakeMod.gridx = 6;
		gbc_CarMakeMod.gridy = 4;
		modifyPermit.add(tf_CarMakeMod, gbc_CarMakeMod);
		tf_CarMakeMod.setColumns(10);

		JLabel lblCarModelMod = new JLabel("Car model:");
		GridBagConstraints gbc_lblCarModelMod = new GridBagConstraints();
		gbc_lblCarModelMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblCarModelMod.anchor = GridBagConstraints.WEST;
		gbc_lblCarModelMod.gridx = 1;
		gbc_lblCarModelMod.gridy = 5;
		modifyPermit.add(lblCarModelMod, gbc_lblCarModelMod);

		tf_CarModelMod = new JTextField();
		GridBagConstraints gbc_CarModelMod = new GridBagConstraints();
		gbc_CarModelMod.insets = new Insets(0, 0, 5, 0);
		gbc_CarModelMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_CarModelMod.gridx = 6;
		gbc_CarModelMod.gridy = 5;
		modifyPermit.add(tf_CarModelMod, gbc_CarModelMod);
		tf_CarModelMod.setColumns(10);

		JLabel lblCarColorMod = new JLabel("Car color:");
		GridBagConstraints gbc_lblCarColorMod = new GridBagConstraints();
		gbc_lblCarColorMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblCarColorMod.anchor = GridBagConstraints.WEST;
		gbc_lblCarColorMod.gridx = 1;
		gbc_lblCarColorMod.gridy = 6;
		modifyPermit.add(lblCarColorMod, gbc_lblCarColorMod);

		tf_CarColorMod = new JTextField();
		GridBagConstraints gbc_CarColorMod = new GridBagConstraints();
		gbc_CarColorMod.insets = new Insets(0, 0, 5, 0);
		gbc_CarColorMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_CarColorMod.gridx = 6;
		gbc_CarColorMod.gridy = 6;
		modifyPermit.add(tf_CarColorMod, gbc_CarColorMod);
		tf_CarColorMod.setColumns(10);

		JLabel lblEnterPermitTypeMod = new JLabel("Enter Permit Type:");
		GridBagConstraints gbc_lblEnterPermitTypeMod = new GridBagConstraints();
		gbc_lblEnterPermitTypeMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblEnterPermitTypeMod.anchor = GridBagConstraints.WEST;
		gbc_lblEnterPermitTypeMod.gridx = 1;
		gbc_lblEnterPermitTypeMod.gridy = 7;
		modifyPermit.add(lblEnterPermitTypeMod, gbc_lblEnterPermitTypeMod);
		GridBagConstraints gbc_comboBoxMod = new GridBagConstraints();
		gbc_comboBoxMod.insets = new Insets(0, 0, 5, 0);
		gbc_comboBoxMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_comboBoxMod.gridx = 6;
		gbc_comboBoxMod.gridy = 7;
		modifyPermit.add(comboBoxMod, gbc_comboBoxMod);

		JLabel lblVisitDateMod = new JLabel("Visit Date:");
		GridBagConstraints gbc_lblVisitDateMod = new GridBagConstraints();
		gbc_lblVisitDateMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblVisitDateMod.anchor = GridBagConstraints.WEST;
		gbc_lblVisitDateMod.gridx = 1;
		gbc_lblVisitDateMod.gridy = 8;
		modifyPermit.add(lblVisitDateMod, gbc_lblVisitDateMod);

		tf_VisitDateMod = new JTextField();
		GridBagConstraints gbc_VisitDateMod = new GridBagConstraints();
		gbc_VisitDateMod.insets = new Insets(0, 0, 5, 0);
		gbc_VisitDateMod.fill = GridBagConstraints.BOTH;
		gbc_VisitDateMod.gridx = 6;
		gbc_VisitDateMod.gridy = 8;
		modifyPermit.add(tf_VisitDateMod, gbc_VisitDateMod);
		tf_VisitDateMod.setColumns(10);

		JLabel lblHostNameMod = new JLabel("Host Name:");
		GridBagConstraints gbc_lblHostNameMod = new GridBagConstraints();
		gbc_lblHostNameMod.insets = new Insets(0, 0, 5, 5);
		gbc_lblHostNameMod.anchor = GridBagConstraints.WEST;
		gbc_lblHostNameMod.gridx = 1;
		gbc_lblHostNameMod.gridy = 9;
		modifyPermit.add(lblHostNameMod, gbc_lblHostNameMod);

		tf_HostNameMod = new JTextField();
		GridBagConstraints gbc_HostNameMod = new GridBagConstraints();

		gbc_HostNameMod.insets = new Insets(0, 0, 5, 0);
		gbc_HostNameMod.fill = GridBagConstraints.HORIZONTAL;
		gbc_HostNameMod.gridx = 6;
		gbc_HostNameMod.gridy = 9;
		modifyPermit.add(tf_HostNameMod, gbc_HostNameMod);
		tf_HostNameMod.setColumns(10);

		btnGetInfo = new JButton("Get Info");
		GridBagConstraints gbc_btnGetInfo = new GridBagConstraints();
		btnGetInfo.setBackground(BUTTON_BGKD);
		btnGetInfo.setForeground(BUTTON_FGND);
		btnGetInfo.setFocusPainted(false);
		btnGetInfo.addActionListener(this);
		gbc_btnGetInfo.fill = GridBagConstraints.BOTH;
		gbc_btnGetInfo.insets = new Insets(0, 0, 5, 5);
		gbc_btnGetInfo.gridx = 1;
		gbc_btnGetInfo.gridy = 10;
		modifyPermit.add(btnGetInfo, gbc_btnGetInfo);

		submitBtnMod = new JButton("Modify");
		submitBtnMod.setBackground(BUTTON_BGKD);
		submitBtnMod.setForeground(BUTTON_FGND);
		submitBtnMod.setFocusPainted(false);
		submitBtnMod.addActionListener(this);

		lblCarNumberMod = new JLabel("Vehicles permitted: 0");
		GridBagConstraints gbc_lblCarNumberMod = new GridBagConstraints();
		gbc_lblCarNumberMod.insets = new Insets(0, 0, 5, 0);
		gbc_lblCarNumberMod.gridx = 6;
		gbc_lblCarNumberMod.gridy = 10;
		modifyPermit.add(lblCarNumberMod, gbc_lblCarNumberMod);
		GridBagConstraints gbc_submitBtnMod = new GridBagConstraints();
		gbc_submitBtnMod.fill = GridBagConstraints.BOTH;
		gbc_submitBtnMod.insets = new Insets(0, 0, 0, 5);
		gbc_submitBtnMod.gridx = 1;
		gbc_submitBtnMod.gridy = 11;
		modifyPermit.add(submitBtnMod, gbc_submitBtnMod);

		lnkSystem_status.addObserver(this);

		setVisible(true);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == submitBtn) {
			checkInputs();
		}
		if (e.getSource() == cb_PermitTypeAdd) {
			int index = cb_PermitTypeAdd.getSelectedIndex();
			if (index < 2) {
				tf_VisitDateAdd.setEditable(true);
				tf_HostNameAdd.setEditable(true);
			} else {
				tf_VisitDateAdd.setEditable(false);
				tf_HostNameAdd.setEditable(false);
			}
		}
		if (e.getSource() == btnSubmitWarning) {
			addWarning();
		}
		if (e.getSource() == btnSubmitWarningCanc) {
			cancelWarning();
		}
		if (e.getSource() == btnSubmitPermitCanc) {
			cancelPermit();
		}
		if (e.getSource() == btnSubmitEnquiry) {
			checkStatus();
		}
		if (e.getSource() == comboBoxMod) {
			int index = comboBoxMod.getSelectedIndex();
			if (index < 2) {
				tf_VisitDateMod.setEditable(true);
				tf_HostNameMod.setEditable(true);
			} else {
				tf_VisitDateMod.setEditable(false);
				tf_HostNameMod.setEditable(false);
			}
		}
		if (e.getSource() == btnGetInfo) {
			//
			findPermit();
		}
		if (e.getSource() == submitBtnMod) {
			//
			checkPermit();
		}
		if (e.getSource() == addVehicleBtn) {
			addVehicles();
		}
		if (e.getSource() == addVehicleClrBtn) {
			clearVehicles();
		}
		if (e.getSource() == vehiclesBoxMod) {
			populateVehicleMod();
		}
		if (e.getSource() == btnAddVehicleMod) {
			changeVehicleNum(1);
		}
		if (e.getSource() == btnRemoveVehicleMod) {
			changeVehicleNum(-1);
		}
	}

	private void changeVehicleNum(int change) {
		// TODO Auto-generated method stub
		int selectedVehicle = vehiclesBoxMod.getSelectedIndex();
		//
		int numberOfVehicles = 0;
		for (int i = 0; i < vehicles.length; i++) {
			if (vehicles[i] != null) {
				numberOfVehicles++;
			}
		}
		//
		if (change < 0) {
			if (selectedVehicle > 0) {
				vehicles[selectedVehicle - 1] = null;
				System.out.println("Vehicles removed!");
				//
				Vehicle_info[] veh = vehicles;
				vehicles = new Vehicle_info[veh.length];
				int index = 0;
				System.out.println("Vehicle array:");
				for (int i = 0; i < vehicles.length; i++) {
					if (veh[i] != null) {
						vehicles[index] = veh[i];
						System.out.println(vehicles[index].getRegistration());
						index++;
					}
				}
				//
				lblCarNumberMod.setText("Vehicles permitted: " + (numberOfVehicles - 1));
			} else {
				System.out.println("No vehicle selected!");
			}
		} else {
			//
			if (vehicles[vehicles.length - 1] == null) {
				String regNum = tf_RegNumberMod.getText();
				String carMake = tf_CarMakeMod.getText();
				String carModel = tf_CarModelMod.getText();
				String carColor = tf_CarColorMod.getText();
				Vehicle_info veh;
				//
				if (regNum.equals("")) {
					displayAlert("No registration number entered!", 'w');
				} else if (carMake.equals("")) {
					displayAlert("No car make entered!", 'w');
				} else if (carModel.equals("")) {
					displayAlert("No car model entered!", 'w');
				} else if ((!carColor.matches("[A-Za-z ]*") || carColor.equals(""))) {
					displayAlert("Wrong car color entered!", 'w');
				} else if (lnkVehicle_list.checkPermit(regNum)) {
					displayAlert("Vehicle is already permitted!", 'w');
				} else if (vehicles[vehicles.length - 1] != null) {
					displayAlert("Maximum number of vehicles are already permitted!", 'w');
				} else {
					// able to add
					veh = new Vehicle_info(regNum, carColor, carMake, carModel);
					//
					for (int i = 0; i < vehicles.length; i++) {
						if (vehicles[i] == null) {
							vehicles[i] = veh;
							break;
						}
					}
					//
					System.out.println("Vehicle succesfully added!");
					//
					lblCarNumberMod.setText("Vehicles permitted: " + (numberOfVehicles + 1));
				}
			} else {
				System.out.println("Maximum number of vehicles are added to the permit!");
			}
		}
		//
		tf_RegNumberMod.setText("");
		tf_CarMakeMod.setText("");
		tf_CarModelMod.setText("");
		tf_CarColorMod.setText("");
		populateVehicleComboBox();
	}

	private void populateVehicleMod() {
		// TODO Auto-generated method stub
		int selectedVehicle = vehiclesBoxMod.getSelectedIndex();
		//
		if (vehiclesBoxMod.getSelectedIndex() > 0) {
			tf_RegNumberMod.setText(vehicles[selectedVehicle - 1].getRegistration());
			tf_CarMakeMod.setText(vehicles[selectedVehicle - 1].getMake());
			tf_CarModelMod.setText(vehicles[selectedVehicle - 1].getModel());
			tf_CarColorMod.setText(vehicles[selectedVehicle - 1].getColour());
		}
	}

	private void clearVehicles() {
		//
		vehicles = new Vehicle_info[5];
		lblCarNumber.setText("Vehicles permitted: 0");
		//
		vehiclesBoxMod.removeAllItems();
		vehiclesBoxMod.addItem("< No vehicles to show >");
	}

	private void addVehicles() {
		//
		String regNum = tf_regNumberAdd.getText();
		String carMake = tf_CarMakeAdd.getText();
		String carModel = tf_CarModelAdd.getText();
		String carColor = tf_CarColorAdd.getText();
		boolean valid = false;
		int permittedVehicles = 0;
		//
		if (regNum.equals("")) {
			displayAlert("No registration number entered!", 'w');
		} else if (carMake.equals("")) {
			displayAlert("No car make entered!", 'w');
		} else if (carModel.equals("")) {
			displayAlert("No car model entered!", 'w');
		} else if (!carColor.matches("[A-Za-z ]*") || carColor.equals("")) {
			displayAlert("Wrong car color entered!", 'w');
		} else {
			if (lnkVehicle_list.checkPermit(regNum)) {
				displayAlert("Vehicle is already permitted!", 'w');
			} else if (vehicles[0] != null) {
				// check for existing vehicles and if there are any existing vehicles in the
				// first place in the vehicles[]
				valid = true;
				//
				for (int i = 0; i < vehicles.length; i++) {
					if (vehicles[i] != null) {
						if (vehicles[i].getRegistration().equals(regNum)) {
							valid = false;
						}
						permittedVehicles = i + 1;
					}
				}
			} else {
				// vehicles[] is empty and information is valid
				valid = true;
			}
		}
		if (valid) {
			Vehicle_info veh = new Vehicle_info(regNum, carColor, carMake, carModel);

			// need to pull car related info, store it to array and use that info to create
			// permit and add new vehicles to it
			if (vehicles[vehicles.length - 1] == null) {

				for (int i = 0; i < vehicles.length; i++) {
					if (vehicles[i] == null) {
						vehicles[i] = veh;
						break;
					}
				}

				// display success message
				displayAlert("Vehicle \"" + veh.getRegistration() + "\" added to permit", 'i');

				lblCarNumber.setText("Vehicles permitted: " + (permittedVehicles + 1));

				tf_regNumberAdd.setText("");
				tf_CarMakeAdd.setText("");
				tf_CarModelAdd.setText("");
				tf_CarColorAdd.setText("");
			} else {
				// display error that 5 vehicles are already associated with the permit
				displayAlert("Vehicle \"" + veh.getRegistration() + "\" has the maximum number of cars assigned", 'w');
			}
		} else {
			displayAlert("Vehicle is already assigned to this permit", 'w');
		}
	}

	private Vehicle_info getVehicle(Permit p) {
		Vehicle_info vehicle = null;
		Set<Vehicle_info> keySet = lnkVehicle_list.getVehicleList().keySet();
		String permitType = null;
		String hostName = null;
		String issueDate = null;
		Iterator<Vehicle_info> iterator = keySet.iterator();
		while (iterator.hasNext()) {
			vehicle = iterator.next();
			if (lnkVehicle_list.getPermit(vehicle) == p) {
				return vehicle;
			}

		}
		return vehicle;
	}

	private void checkPermit() {
		//
		String name = tf_NameMode.getText();
		String regNum = tf_RegNumberMod.getText();
		String carMake = tf_CarMakeMod.getText();
		String carModel = tf_CarModelMod.getText();
		String carColor = tf_CarColorMod.getText();
		int permitType = comboBoxMod.getSelectedIndex();
		String visitDate = tf_VisitDateMod.getText();
		String hostName = tf_HostNameMod.getText();
		boolean vehicleAdded = false;
		//
		if (vehicles[0] != null) {
			vehicleAdded = true;
		}
		//
		if (!name.matches("^[\\p{L} .'-]+$") || name.equals("")) {
			displayAlert("Invalid name entered!", 'w');
		} else if (regNum.equals("") & !vehicleAdded) {
			displayAlert("No registration number entered!", 'w');
		} else if (carMake.equals("") & !vehicleAdded) {
			displayAlert("No car make entered!", 'w');
		} else if (carModel.equals("") & !vehicleAdded) {
			displayAlert("No car model entered!", 'w');
		} else if ((!carColor.matches("[A-Za-z ]*") || carColor.equals("")) & !vehicleAdded) {
			displayAlert("Wrong car color entered!", 'w');
		} else if ((visitDate.equals("") || !visitDate.matches("^[1-9]\\d*$")) & permitType < 2) {
			displayAlert("Invalid visit date entered!", 'w');
		} else if (hostName.equals("") & permitType < 2) {
			displayAlert("No host name entered!", 'w');
		} else {
			if (permitType >= 2)
				visitDate = Integer.toString(Integer.MAX_VALUE); // a fix to skip the next if
			// check the visit date
			if (Integer.parseInt(visitDate) < today.getDayNumber()) {
				displayAlert("Visit date cannot be in the past.", 'w');
			} else {
				// cancel old permit and remove old vehicle
				Permit p = lnkPermit_list.getPermit(tf_PermitNumberMod.getText());
				lnkPermit_list.cancelPermit(tf_PermitNumberMod.getText());
				Vehicle_info[] v = lnkVehicle_list.getVehicles(p);
				for (int i = 0; i < v.length; i++) {
					lnkVehicle_list.remove(v[i]);
				}
				//
				List<Vehicle_info> keys = new ArrayList<Vehicle_info>(lnkVehicle_list.getVehicleList().keySet());
				List<Permit> values = new ArrayList<Permit>(lnkVehicle_list.getVehicleList().values());
				
				Vehicle_info veh;
				int ammount = lnkVehicle_list.getVehicleList().size();
				//
				for (int i = 0; i < ammount; i++) {
					veh = keys.get(i);
					if (veh.getPermit().equals(p)) {
						lnkVehicle_list.remove(vehicles[i]);
					}
				}
				// add new permit depending on type
				createPermit(permitType, name, regNum, carMake, carModel, carColor, visitDate, hostName);
			}
		}
	}

	private void cancelPermit() {
		String name = tf_NameCanc.getText();
		if (!name.matches("^[\\p{L} .'-]+$") || name.equals("")) {
			displayAlert("Invalid name entered!", 'w');
		} else if (!lnkPermit_list.checkPermit(name)) {
			displayAlert("Permit with entered name does not exist!", 'w');
		} else {
			Object[] options = { "OK", "CANCEL" };
			int option = JOptionPane.showOptionDialog(null, "Press OK to confirm cancel of Permit: " + name, "Warning",
					JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
			if (option == 0) {
				if (lnkPermit_list.cancelPermit(name)) {
					textPanePermitCanc.setText("Pemit Found and Deleted");
					tf_NameCanc.setText("");
				}
			}
		}
	}

	private void addWarning() {
		String name = tf_NameAddWarning.getText();
		if (!name.matches("^[\\p{L} .'-]+$") || name.equals("")) {
			displayAlert("Invalid name entered!", 'w');
		} else if (!lnkPermit_list.checkPermit(name)) {
			displayAlert("Permit with entered name does not exist!", 'w');
		} else {
			//

			Permit aPermit = lnkPermit_list.getPermit(name);
			if (aPermit != null && aPermit.getWarnings() < 3) {
				Object[] options = { "OK", "CANCEL" };
				int option = JOptionPane.showOptionDialog(null, "Do you want to add a warning for Permit: " + name,
						"Warning", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
				if (option == 0) {
					aPermit.addWarning();
					tp_RecordWarning.setText(" Permit found! \n Number of Warning: " + aPermit.getWarnings());
					tf_NameCanc.setText("");
				}

			} else {
				displayAlert("Permit reached maximum number of warnings!", 'w');
			}
		}

	}

	private void cancelWarning() {

		int numberOfWarnings = cancelWarningBox.getSelectedIndex() + 1;
		String name = tf_CancelWarningNumber.getText();
		//
		if (!name.matches("^[\\p{L} .'-]+$") || name.equals("")) {
			displayAlert("Invalid name entered!", 'w');
		} else if (!lnkPermit_list.checkPermit(name)) {
			displayAlert("Permit with entered name does not exist!", 'w');
		} else {
			//
			Permit aPermit = lnkPermit_list.getPermit(name);

			if (aPermit != null) {
				Object[] options = { "OK", "CANCEL" };
				int option = JOptionPane.showOptionDialog(null,
						"Do you want to delete " + numberOfWarnings + " warning for Permit: " + name, "Warning",
						JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
				if (option == 0) {
					if (numberOfWarnings <= aPermit.getWarnings()) {
						aPermit.removeWarnings(numberOfWarnings);
						textPaneWarningCanc.setText(" Permit found! \n Number of Warnings: " + aPermit.getWarnings());
						tf_CancelWarningNumber.setText("");
					} else {
						displayAlert("You tried to delete more warning that the one on the Permit!", 'w');
					}
				}

			} else {
				textPaneWarningCanc.setText(" Permit not found!");
				tf_CancelWarningNumber.setText("");
			}

		}
	}

	private void checkStatus() {
		String nameStatus = tf_Status.getText();

		if (!nameStatus.matches("^[\\p{L} .'-]+$") || nameStatus.equals("")) {
			displayAlert("Invalid name entered!", 'w');
		} else {
			if (lnkPermit_list.checkPermit(nameStatus)) {
				Permit aPermit = lnkPermit_list.getPermit(nameStatus);
				int permittedVehicles = 0;
				Vehicle_info[] vehicles_permit = lnkVehicle_list.getVehicles(aPermit);
				StringBuilder regNums = new StringBuilder();
				StringBuilder carMakes = new StringBuilder();
				StringBuilder carModels = new StringBuilder();
				StringBuilder carColors = new StringBuilder();

				for (Vehicle_info veh : vehicles_permit) {
					if (veh != null) {

						if (permittedVehicles == 0) {
							regNums.append(veh.getRegistration());
							carMakes.append(veh.getMake());
							carModels.append(veh.getModel());
							carColors.append(veh.getColour());
							permittedVehicles++;

						} else {
							regNums.append(" , ").append(veh.getRegistration());
							carMakes.append(" , ").append(veh.getMake());
							carModels.append(" , ").append(veh.getModel());
							carColors.append(" , ").append(veh.getColour());
							permittedVehicles++;

						}

					}
				}
				String permitType = null;
				String hostName = null;
				String issueDate = null;
				String expireDate = null;
				//
				issueDate = Integer.toString(aPermit.getIssueDate().getDayNumber());

				if (aPermit instanceof Day_visitor_permit) {
					permitType = "Day Visitor Permit";
					hostName = ((Day_visitor_permit) aPermit).getHostName();
					expireDate = Integer.toString(((Day_visitor_permit) aPermit).getActiveDate().getDayNumber());
				} else if (aPermit instanceof Regular_visitor_permit) {
					permitType = "Regular Visitor Permit";
					hostName = ((Regular_visitor_permit) aPermit).getHostName();
					expireDate = Integer.toString(((Regular_visitor_permit) aPermit).getExpiryDate().getDayNumber());
				} else if (aPermit instanceof Permanent_visitor_permit) {
					permitType = "Permanent Visitor Permit";
					hostName = "N/A";
					expireDate = "N/A";
				} else {
					permitType = "University Member Permit";
					hostName = "N/A";
					expireDate = "N/A";
				}
				tp_Enquiry.setText(" Permit found! \n Permit Name: " + aPermit.getPermitHolder() + "\n Permit Number: "
						+ aPermit.getUniqueID() + "\n Permit Type: " + permitType + "\n Host name: " + hostName
						+ "\n Issue Date: " + issueDate + "\n Expiring Date: " + expireDate + "\n Warnings: "
						+ aPermit.getWarnings() + "\n Suspended: " + aPermit.isSuspended() + "\n Number of Cars: "
						+ permittedVehicles + "\n Registration Number: " + regNums + "\n Car maker: " + carMakes
						+ "\n Car model: " + carModels + "\n Car color: " + carColors + "\n Number of Entries: "
						+ aPermit.getEntries());

			} else {
				tp_Enquiry.setText("Permit not found");

			}

		}
	}

	private void findPermit() {
		//
		String permitName = tf_PermitNumberMod.getText();
		if (!permitName.matches("^[\\p{L} .'-]+$") || permitName.equals("")) {
			displayAlert("Invalid name entered!", 'w');
		} else if (!lnkPermit_list.checkPermit(permitName)) {
			displayAlert("Permit with entered name does not exist!", 'w');
		} else {
			//
			Permit aPermit = lnkPermit_list.getPermit(permitName);
			int numberOfVehicles = 0;
			//
			Vehicle_info[] veh = lnkVehicle_list.getVehicles(aPermit);
			for (int i = 0; i < veh.length; i++) {
				vehicles[i] = veh[i];
				numberOfVehicles++;
			}
			//
			int dropdown = 0;
			//
			populateVehicleComboBox();
			//
			// fill fields with data from the permit
			tf_NameMode.setText(aPermit.getPermitHolder());
			//
			if (aPermit instanceof Day_visitor_permit) {
				dropdown = 0;
			} else if (aPermit instanceof Regular_visitor_permit) {
				dropdown = 1;
			} else if (aPermit instanceof Permanent_visitor_permit) {
				dropdown = 2;
			} else {
				dropdown = 3;
			}
			comboBoxMod.setSelectedIndex(dropdown);
			//
			if (dropdown < 2) {
				tf_VisitDateMod.setText(Integer.toString(aPermit.getIssueDate().getDayNumber()));
				if (dropdown == 0) {
					tf_HostNameMod.setText(((Day_visitor_permit) aPermit).getHostName());
				} else {
					tf_HostNameMod.setText(((Regular_visitor_permit) aPermit).getHostName());
				}
			}
			//
			lblCarNumberMod.setText("Vehicles permitted: " + numberOfVehicles);
		}
	}

	private void populateVehicleComboBox() {
		//
		String vehicleInfo = "";
		//
		vehiclesBoxMod.removeAllItems();
		vehiclesBoxMod.addItem("< Select vehicle to edit >");
		//
		for (int i = 0; i < vehicles.length; i++) {
			if (vehicles[i] != null) {
				vehicleInfo = "RegNum: " + vehicles[i].getRegistration() + ", Make: " + vehicles[i].getMake()
						+ ", Model: " + vehicles[i].getModel() + ", Colour: " + vehicles[i].getColour();
				vehiclesBoxMod.addItem(vehicleInfo);
			}
		}
	}

	private void checkInputs() {
		//
		String name = tf_NameAdd.getText();
		String regNum = tf_regNumberAdd.getText();
		String carMake = tf_CarMakeAdd.getText();
		String carModel = tf_CarModelAdd.getText();
		String carColor = tf_CarColorAdd.getText();
		int permitType = cb_PermitTypeAdd.getSelectedIndex();
		String visitDate = tf_VisitDateAdd.getText();
		String hostName = tf_HostNameAdd.getText();
		boolean vehicleAdded = false;
		//
		if (vehicles[0] != null) {
			vehicleAdded = true;
		}
		//
		if (!name.matches("^[\\p{L} .'-]+$") || name.equals("")) {
			displayAlert("Invalid name entered!", 'w');
		} else if (regNum.equals("") & !vehicleAdded) {
			displayAlert("No registration number entered!", 'w');
		} else if (carMake.equals("") & !vehicleAdded) {
			displayAlert("No car make entered!", 'w');
		} else if (carModel.equals("") & !vehicleAdded) {
			displayAlert("No car model entered!", 'w');
		} else if ((!carColor.matches("[A-Za-z ]*") || carColor.equals("")) & !vehicleAdded) {
			displayAlert("Wrong car color entered!", 'w');
		} else if ((visitDate.equals("") || !visitDate.matches("^[1-9]\\d*$")) & permitType < 2) {
			displayAlert("Invalid visit date entered!", 'w');
		} else if (hostName.equals("") & permitType < 2) {
			displayAlert("No host name entered!", 'w');
		} else {
			if (permitType >= 2)
				visitDate = Integer.toString(Integer.MAX_VALUE); // a fix to skip the next if
			// check the visit date
			if (Integer.parseInt(visitDate) < today.getDayNumber()) {
				displayAlert("Visit date cannot be in the past.", 'w');
			} else if (lnkPermit_list.checkPermit(name)) { // check for existing permit and vehicles
				displayAlert("Visitor already has a permit!", 'w');
			} else if (lnkVehicle_list.checkPermit(regNum) & !vehicleAdded) {
				displayAlert("Vehicle is already permitted!", 'w');
			} else {
				// add new permit depending on type
				createPermit(permitType, name, regNum, carMake, carModel, carColor, visitDate, hostName);
			}
		}
	}

	public void createPermit(int type, String name, String regNum, String carMake, String carModel, String carColor,
			String visitDate, String hostName) {
		//
		Date theDay = new Date();
		theDay.setDayNumber(today.getDayNumber());
		Date later = new Date();
		if (type < 2)
			later.setDayNumber(Integer.parseInt(visitDate));
		//
		Vehicle_info veh = new Vehicle_info(regNum, carColor, carMake, carModel);
		//
		for (int i = 0; i < vehicles.length; i++) {
			if (vehicles[i] != null) {
				veh = vehicles[i];
				break;
			}
		}
		// code for setting permit data
		switch (type) {
		case 0:
			// Day visitor permit
			Day_visitor_permit dvp = new Day_visitor_permit(name, hostName, veh, theDay, today);
			setPermitInfo(veh, dvp);
			break;
		case 1:
			// Regular visitor permit
			Regular_visitor_permit rvp = new Regular_visitor_permit(name, hostName, theDay, later, veh);
			setPermitInfo(veh, rvp);
			break;
		case 2:
			// Permanent visitor permit
			Permanent_visitor_permit pvp = new Permanent_visitor_permit(name, theDay, veh);
			setPermitInfo(veh, pvp);
			break;
		case 3:
			// University member permit
			University_member_permit ump = new University_member_permit(name, theDay, veh);
			setPermitInfo(veh, ump);
			break;
		}
		// success message
		if (tabbedPane.getSelectedIndex() == 0) {
			displayAlert("Permit for " + name + " has been created!", 'i');
		} else {
			displayAlert("Permit for " + name + " has been modified!", 'i');
		}
		//
		clearVehicles();
	}

	/**
	 * Set a permit info
	 * 
	 * @param veh
	 * @param p
	 */
	public void setPermitInfo(Vehicle_info veh, Permit p) {
		veh.setPermit(p);

		for (int i = 0; i < vehicles.length; i++) {
			if (vehicles[i] != null & i > 0) {
				try {
					veh = vehicles[i];
					p.addVehicle(veh);
					veh.setPermit(p);
				} catch (Exception e) {
					displayAlert("Issue while adding a new vehicle to the permit!", 'e');
					e.printStackTrace();
				}
			}
		}

		lnkPermit_list.addPermit(p);
	}

	/**
	 * Used to display JOptionPane messages to the user
	 * 
	 * @param text [String] text to be shown in the message box
	 * @param type [char] 'i' for an infomessage, 'w' for a warning, 'e' for an
	 *             error.
	 */
	public void displayAlert(String text, char type) {
		switch (type) {
		case 'i':
			JOptionPane.showMessageDialog(contentPane, text, "Success", JOptionPane.INFORMATION_MESSAGE);
			break;
		case 'w':
			JOptionPane.showMessageDialog(contentPane, text, "Attention", JOptionPane.WARNING_MESSAGE);
			break;
		case 'e':
			JOptionPane.showMessageDialog(contentPane, text, "Error", JOptionPane.ERROR_MESSAGE);
			break;
		default:
			JOptionPane.showMessageDialog(contentPane, "There was an issue while displaying a message!", "Error",
					JOptionPane.ERROR_MESSAGE);
			break;
		}
	}

	@Override
	public void update(Observable o, Object arg) {
		setTitle("Administration Office \t [Date: " + today.getDayNumber() + "]");
	}
}
